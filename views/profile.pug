html
  style
    include ../public/css/profileEdit.css
  head
    link(href='https://fonts.googleapis.com/css?family=Open+Sans|Quicksand', rel='stylesheet')
    script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js")
  body
    //- configure layout with grid
    .grid

      //- add navigation bar with links to relevant pages
      .navbar
        span(style='font-size:30px;cursor:pointer', onclick='openNav()') ☰ Menu
        #mySidenav.sidenav
          a.closebtn(href='javascript:void(0)', onclick='closeNav()') ×
          a(href='#') ☺ #{user.userName}
          a(href='/') Home
          a(href='/about') About
          a(href='/events/findEvent') Find Events
          a(href='/places') Places
          a(href='/events/createEvent') Create Event!
        a(href='/') 
            img.logo(src= "/logo.png", alt='GPS', width='80', height='80')

      //- contains basic profile info for user
      .basic_profile
        - source = user.display ? user.display : '/pictures/profile_icon.png'
        img.profile(src=user.display, alt='profile_picture')

        -var fullname = firstName + ' ' + lastName;
        h3 #{user.firstName} #{user.lastName}
        h4 Username: #{user.userName}
        h4 Join Date: #{user.joined_date}
        h4 Date of Birth: #{user.DOB}
        
        if notCurr
          -
            var followText = 'Follow';
            if(isFollowing){
                followText = 'Unfollow';
            }
          input#followUser(type='submit', value=followText, name=user.userName)

      //- display other contents about users in tabs
      .all_content
        // Tab links
        .tab
          button.tablinks#start(onclick="openTab(event, 'Interests')") Interests
          button.tablinks(onclick="openTab(event, 'Events')") Events
          button.tablinks(onclick="openTab(event, 'Places')") Places
          button.tablinks(onclick="openTab(event, 'Friends')") Friends
          button.tablinks(onclick="openTab(event, 'Reviews')") Reviews
          button.tablinks(onclick="openTab(event, 'Bookmarks')") Bookmarks
          button(onclick="openSettings()") Settings

        //- settings tab allow users to change their info
        #overlay
            .settings
              form(action='/members/updateUser', method='post', enctype='multipart/form-data', onsubmit='return checkPwd()')
                h1 Change interests:
                  input#input(type='text', placeholder='Search Tags')
                  input(type='button', value='Add tag', onclick='addTag()')

                  #checked
                h2 Change Description:
                  input(type='text', placeholder= user.desc, name='desc')
                //- currently, only changing password is possible
                h3 Change Password:
                br
                p
                  | Old password:
                  input#oldPwd(type='password', name='oldPwd')
                  br
                  | New password:
                  input#newPwd(type='text', name='password')
                  br
                  | Retype new password:
                  input#retype(type='password', name='retype')
                  br
                  
                h4 Change Display Picture:
                  input#file-field(type='file', onchange='previewImage(event)', name='display')
                  div#preview
                  img#image-field(src='/pictures/profile_icon.png', width='150', height='150')
                
                input(type='submit', value='Submit')
              button(onclick='removeSettings()') X

        //- The rest of the tab contents
        // Tab content
        #Interests.tabcontent
          h3 Your Interests:
          p #{user.interests}
          h3 Some description about you:
          p
            | #{user.desc}
        #Events.tabcontent
          h3 Past Events Attended
              if eventsJoined
                  ul
                      each event in eventsJoined
                          a(href='/events/getEvent/' + event._id)
                              li #{event.name}
          h3 Past Events Created
              if eventsCreated
                  ul
                      each userEvent in eventsCreated
                          a(href='/events/getEvent/' + userEvent._id)
                              li #{userEvent.name}
        #Places.tabcontent
          h3 Places to go
          p Places went
        #Friends.tabcontent
          h3 Your friends:
          if user.followedUsers
            each friend in user.followedUsers
                a(href='/profile/' + friend)
                    li #{friend}
        #Reviews.tabcontent
          h3 Your reviews
          ul
            if rating
                each rate in rating
                    li 
                        p #{rate.eventName}
                        p #{rate.desc}
                        p You rated this event: #{rate.stars}/5
                        p Date reviewed: #{rate.datePublished}
        #Bookmarks.tabcontent
          h3 Your bookmarks
          ul
            if user.interestedEvents
                each event in user.interestedEvents
                    li #{event}

      //- Footer
      .footer
        p(style='color:white')
          | © 2019 Get People Socilaizing. All rights reserved.
          a(href='page2.html')
        a(href='page2.html')
        ul(style='color:white')
          a(href='page2.html')
          li
            a(href='page2.html')
            a(href='#') Privacy Policy
          li
            a(href='#') Terms of Service
          li
            a(href='#') Cookie Policy

    //- Javascript codes
    script.
      document.getElementById('start').click();

      function openTab(evt, tabName) {

          // Declare all variables
          var i, tabcontent, tablinks;
          // Get all elements with class="tabcontent" and hide them
          tabcontent = document.getElementsByClassName("tabcontent");
          for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
          }
          // Get all elements with class="tablinks" and remove the class "active"
          tablinks = document.getElementsByClassName("tablinks");
          for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
          }
          // Show the current tab, and add an "active" class to the button that opened the tab
          document.getElementById(tabName).style.display = "block";
          evt.currentTarget.className += " active";
      }

      //- Navigation bar functions
      function openNav() {
        document.getElementById("mySidenav").style.width = "250px";
      }

      function closeNav() {
        document.getElementById("mySidenav").style.width = "0";
      }

      // Setting tab functions
      function openSettings(){
        document.getElementById("overlay").style.display = "block";
      }

      var tags = [];

      function removeSettings(){
        document.getElementById("overlay").style.display = "none";
        tags = [];
      }

      function previewImage(event){
          var reader = new FileReader();
          var imageField = document.getElementById("image-field")
          reader.onload = function(){
          if(reader.readyState == 2){
              imageField.src = reader.result;
              }
          }
          reader.readAsDataURL(event.target.files[0]);
      }

      function addTag() {

          var tagValue = document.getElementById('input');

          if(tagValue.value.length > 0 && !tags.includes(tagValue.value.toLowerCase())){
              var tagLst = document.getElementById('checked');

              var tag = document.createElement('input');
              tag.type = 'text';
              tag.value = tagValue.value.toLowerCase();
              tag.name = 'interests';
              tag.readonly = true;
              tag.onclick = function(){
                  var index = tags.indexOf(tag.value.toLowerCase());
                  tags.splice(index,1);
                  tag.parentNode.removeChild(tag);
              }

              tagLst.appendChild(tag);

              tags.push(tagValue.value.toLowerCase());
          }
          tagValue.value = "";
      }

      function checkPwd(){
          var pwd = document.getElementById('newPwd').value;
          var oldPwd = document.getElementById('oldPwd').value;
          var retypedPwd = document.getElementById('retype').value;
          var user = !{JSON.stringify(user)};

          console.log(pwd);
          console.log(oldPwd);
          console.log(retypedPwd);

          if(pwd === retypedPwd && oldPwd === user.password)
            return true;
          
          alert('Incorrect password input');
          return false;
      }

      //- Dynamic update function
      $(function(){
        $('#followUser').click(function(event){
            event.preventDefault();
            var thisUser = {
                username: $('#followUser')[0].name
            };

            if($('#followUser')[0].value === 'Follow'){
                $.ajax({
                    url: '/members/followUser',
                    type: 'put',
                    data: thisUser,
                    success: function(data){
                        $('#followUser').val('Unfollow');
                    }
                });
            }
            else {
                $.ajax({
                    url: '/members/unfollowUser',
                    type: 'put',
                    data: thisUser,
                    success: function(data){
                        $('#followUser').val('Follow');
                    }
                });
            }
        });
      });
